@page "/manage-clients"
@inject GymManagement.Data.ClientService ClientService
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.WebUtilities

<link href="./css/gymManagement.css" rel="stylesheet" />

<PageTitle>Manage Clients</PageTitle>

<h2>Manage Clients</h2>

<!-- Search Section -->
<div class="search-section">
    <input type="text" @bind="searchText" placeholder="Search clients..." class="search-input" />
    <button @onclick="SearchClients" class="search-button">Search</button>
</div>
<hr />
<!-- Client Form -->
<h3>Add Membership:</h3>
@if (!string.IsNullOrEmpty(errormessage))
{
    <div class="alert alert-danger">@errormessage</div>
}
@if (filteredClients == null || !filteredClients.Any())
{
    <div class="alert alert-info">No records found.</div>
}
else
{
    <table class="clients-table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Contact Number</th>
                <th>Notes</th>
                <th>Date of Birth</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredClients)
            {
                <tr>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Email</td>
                    <td>@item.ContactNumber</td>
                    <td>@item.Notes</td>
                    <td>@item.DateOfBirth</td>
                    <td>
                        <a href="/additem/@item.Id" class="btn btn-warning">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="()=>DeleteItem(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<a href="/additem" class="btn btn-primary">Add New Member</a>
<button class="btn btn-danger" @onclick="TruncateClientsTable">Truncate Table</button>

@code {
    private List<Client> clients = new List<Client>();
    private List<Client> filteredClients = new List<Client>();
    private string errormessage = string.Empty;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("message", out var message))
            {
                errormessage = message;
            }
            clients = await ClientService.GetItemsAsync();
            filteredClients = clients; // Initialize filteredClients with all clients
        }
        catch (Exception ex)
        {
            errormessage = ex.Message;
        }
    }

    private void SearchClients()
    {
        try
        {
            if (clients == null || !clients.Any())
            {
                errormessage = "No clients available to search.";
                filteredClients = new List<Client>();
                return;
            }

            if (!string.IsNullOrEmpty(searchText))
            {
                filteredClients = clients.Where(c =>
                    (c.FirstName != null && c.FirstName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                    (c.LastName != null && c.LastName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                    (c.Email != null && c.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                    (c.ContactNumber != null && c.ContactNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                    (c.Notes != null && c.Notes.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                    (c.DateOfBirth != null && c.DateOfBirth.ToString("yyyy-MM-dd").Contains(searchText))
                ).ToList();

                if (!filteredClients.Any())
                {
                    errormessage = "No clients found matching the search criteria.";
                }
                else
                {
                    errormessage = string.Empty;
                }
            }
            else
            {
                errormessage = string.Empty;
                filteredClients = clients; // Reset to all clients if search is empty
            }
        }
        catch (Exception ex)
        {
            errormessage = ex.Message;
        }
    }

    private async Task DeleteItem(Client item)
    {
        try
        {
            await ClientService.RemoveClient(item);
            var message = $"Client is deleted with ID {item.Id}";
            Navigation.NavigateTo($"/manage-clients?message={Uri.EscapeDataString(message)}", true); // Force reload the page with message
        }
        catch (Exception ex)
        {
            errormessage = ex.Message;
        }
    }

    private async Task TruncateClientsTable()
    {
        try
        {
            await ClientService.TruncateClientsTableAsync();
            errormessage = "Clients table truncated successfully.";
            Navigation.NavigateTo("/manage-clients", true); // Force reload the page
        }
        catch (Exception ex)
        {
            errormessage = ex.Message;
        }
    }
}
