@page "/manage-bookings"
@using GymManagement.Data
@inject Data.BookingService BookingService
@inject Data.ClientService ClientService
@inject Data.EquipmentService EquipmentService

<link href="./css/gymManagement.css" rel="stylesheet" />

<PageTitle>Manage Bookings</PageTitle>

<h3>Manage Bookings</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (bookings == null || !bookings.Any())
{
    <div class="alert alert-info">No bookings found.</div>
}
else
{
    <table class="booking-table">
        <thead>
            <tr>
                <th>Client First Name</th>
                <th>Client Last Name</th>
                <th>Booking Start Date</th>
                <th>Booking End Date</th>
                <th>Equipment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td>@booking.ClientFirstName</td>
                    <td>@booking.ClientLastName</td>
                    <td>@booking.BookingStartDate.ToShortDateString()</td>
                    <td>@booking.BookingEndDate.ToShortDateString()</td>
                    <td>@booking.EquipmentName</td>
                    <td>
                        <button @onclick="() => EditBooking(booking)" class="btn btn-warning">Edit</button>
                        <button @onclick="() => DeleteBooking(booking)" class="btn btn-sm btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<hr />
<h3>@(isEditMode ? "Edit Booking" : "Add Booking")</h3>
<EditForm Model="@newBooking" OnValidSubmit="SaveBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="flex-container">
        <div class="flex-item">
            <label>Client:</label>
            <select @bind="newBooking.ClientId">
                @foreach (var client in clients)
                {
                    <option value="@client.Id">@client.FirstName @client.LastName</option>
                }
            </select>
            <label>Booking Start Date:</label>
            <input type="date" @bind="newBooking.BookingStartDate" />

            <label>Booking End Date:</label>
            <input type="date" @bind="newBooking.BookingEndDate" />

            <label>Equipment (Optional):</label>
            <select @bind="newBooking.EquipmentId">
                <option value="">None</option>
                @foreach (var equipment in equipments)
                {
                    <option value="@equipment.Id">@equipment.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="flex-container">
        <div class="flex-row">
            <button type="submit">@(isEditMode ? "Update Booking" : "Add Booking")</button>
            @if (isEditMode)
            {
                <button type="button" @onclick="CancelEdit">Cancel</button>
            }
        </div>
    </div>
</EditForm>

@code {
    private List<Booking> bookings = new List<Booking>();
    private List<Client> clients = new List<Client>();
    private List<Equipment> equipments = new List<Equipment>();
    private string errorMessage = string.Empty;
    private Booking newBooking = new Booking
        {
            BookingStartDate = DateTime.Today,
            BookingEndDate = DateTime.Today
        };
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bookings = await BookingService.GetBookingsWithClientDetailsAsync();
            clients = await ClientService.GetItemsAsync();
            equipments = await EquipmentService.GetAllEquipmentsAsync();
            await PopulateClientAndEquipmentDetails();
            SetDefaultClientId();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void SetDefaultClientId()
    {
        if (clients.Any())
        {
            newBooking.ClientId = clients.First().Id;
        }
    }

    private async Task PopulateClientAndEquipmentDetails()
    {
        foreach (var booking in bookings)
        {
            var client = clients.FirstOrDefault(c => c.Id == booking.ClientId);
            if (client != null)
            {
                booking.ClientFirstName = client.FirstName;
                booking.ClientLastName = client.LastName;
            }

            if (booking.EquipmentId.HasValue)
            {
                var equipment = equipments.FirstOrDefault(e => e.Id == booking.EquipmentId.Value);
                if (equipment != null)
                {
                    booking.EquipmentName = equipment.Name;
                }
            }
        }
    }

    private async Task SaveBooking()
    {
        try
        {
            if (!ValidateBooking(newBooking))
            {
                return;
            }

            await BookingService.SaveBookingAsync(newBooking);

            bookings = await BookingService.GetBookingsWithClientDetailsAsync();
            await PopulateClientAndEquipmentDetails();
            ResetForm();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving booking: {ex.Message}";
        }
    }

    private bool ValidateBooking(Booking booking)
    {
        if (booking.ClientId == 0)
        {
            errorMessage = "Select Client name";
            return false;
        }

        if (booking.BookingStartDate <= DateTime.Today)
        {
            errorMessage = "Booking start date must be greater than today.";
            return false;
        }

        if (booking.BookingEndDate <= booking.BookingStartDate)
        {
            errorMessage = "Booking end date must be later than the start date.";
            return false;
        }

        return true;
    }

    private void EditBooking(Booking booking)
    {
        newBooking = new Booking
            {
                Id = booking.Id,
                ClientId = booking.ClientId,
                BookingStartDate = booking.BookingStartDate,
                BookingEndDate = booking.BookingEndDate,
                EquipmentId = booking.EquipmentId,
                ClientFirstName = booking.ClientFirstName,
                ClientLastName = booking.ClientLastName,
                EquipmentName = booking.EquipmentName
            };
        isEditMode = true;
    }

    private void CancelEdit()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        newBooking = new Booking
            {
                BookingStartDate = DateTime.Today,
                BookingEndDate = DateTime.Today
            };
        SetDefaultClientId();
        isEditMode = false;
    }

    private async Task DeleteBooking(Booking booking)
    {
        try
        {
            await BookingService.DeleteBookingAsync(booking);
            bookings = await BookingService.GetBookingsWithClientDetailsAsync();
            await PopulateClientAndEquipmentDetails();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting booking: {ex.Message}";
        }
    }
}
